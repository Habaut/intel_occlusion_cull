//--------------------------------------------------------------------------------------
// Copyright 2011 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------
#include "CPUTFontOGLES.h"
#include "CPUTTextureOGLES.h"
#include "CPUTAssetLibraryOGLES.h"

int gFontStartLocations_active[] =
{
    // auto-generated by off-line tool
    0,7,15,22,30,37,42,50,58,61,66,73,77,                   //a-m
    88,96,104,111,119,124,132,137,144,152,162,170,178,      //n-z
    185,195,204,213,223,231,239,249,258,262,270,279,287,    //A-M
    297,306,317,325,335,344,352,360,369,379,392,401,410,    //N-Z
    419,425,432,440,448,456,463,470,478,485,                //1-0
    493,497,500,506,510,515,520,525,530,535,543,547,561,    //symbols ,-#
    569,577,589,596,606,612,616,621,629,637,642,648,653,    //symbols $-:
    657,664,672,680,688,694,701                             //symbols "-=
    ,705,720,                                               //dead spot used for the space char and tab
    -1,                                                     //end marker
};

// height of the font
const int gFontHeight = 12;

// y offset to get to the next font down (the disabled font)
const int gYOffset = 12;
    
//-----------------------------------------------------------------------------
CPUTFont* CPUTFontOGLES::CreateFont( cString FontName, cString AbsolutePathAndFilename )
{
    CPUTFontOGLES* pNewFont = new CPUTFontOGLES();

    // load the actual font image
    CPUTAssetLibraryOGLES* pAssetLibrary = (CPUTAssetLibraryOGLES*)CPUTAssetLibraryOGLES::GetAssetLibrary();
    pNewFont->m_pTextAtlas= (CPUTTextureOGLES*) pAssetLibrary->GetTexture(AbsolutePathAndFilename, true);
    ASSERT(pNewFont->m_pTextAtlas, _L("CPUTFontOGLES::CreateFont() - Error loading specified font texture"));
    // get the TextureResourceView
    pNewFont->m_TextAtlasResource = pNewFont->m_pTextAtlas->GetShaderResourceID();
    
    /* gltodo: get the image size from the texture
    // Get and store the atlas size
    D3D11_TEXTURE2D_DESC TextureDesc;
    ID3D11Texture2D* p2DTexture = NULL;

    
    // get the ID3D11Resource from the ID3D11ShaderResourceView
    ID3D11Resource* pResource = NULL;
    pNewFont->m_pTextAtlasView->GetResource(&pResource);

    // get the ID3D11Texture2D from the ID3D11Resource
    HRESULT hr = pResource->QueryInterface(__uuidof(ID3D11Texture2D) ,(void**)&p2DTexture);
    ASSERT( SUCCEEDED(hr), _L("CPUTFontOGLES::CreateFont() - Error loading specified font texture"));
    p2DTexture->GetDesc(&TextureDesc);
       */

    // store the image dimensions/size
    pNewFont->m_AtlasWidth = 750.0f; //(float)TextureDesc.Width;
    pNewFont->m_AtlasHeight = 24.0f; //(float)TextureDesc.Height;
    

    // todo: can use the tick marks above each glyph to determine start/stop
    // But this requires me to be able to map the texture so I can walk it and find the glyph start/stop
    // points.  Currently we register all textures as immutable, so we can't map the texture. 
    // For now, I have an offline tool generate the mappings found in gFontStartLocations_active[]
        
    int index=0;
    while(-1 != gFontStartLocations_active[index])
    {
        // record the start location
        pNewFont->m_pGlyphStarts[index] = gFontStartLocations_active[index];

        // calculate the size of each glyph in pixels
        pNewFont->m_pGlyphSizes[index].width = gFontStartLocations_active[index+1] - gFontStartLocations_active[index];
        pNewFont->m_pGlyphSizes[index].height = gFontHeight-1; // -1 for top line of glyph start marker dots

        // calculate the UV coordinates for the 'enabled' version of this glyph
        pNewFont->m_pGlyphUVCoords[4*index+0] = gFontStartLocations_active[index]/pNewFont->m_AtlasWidth;       // u1 - upper left x
        pNewFont->m_pGlyphUVCoords[4*index+1] = 1.0f/pNewFont->m_AtlasHeight;                                   // v1 - upper left y
        pNewFont->m_pGlyphUVCoords[4*index+2] = gFontStartLocations_active[index+1]/pNewFont->m_AtlasWidth;     // u2 - lower right x
        pNewFont->m_pGlyphUVCoords[4*index+3] = gFontHeight/pNewFont->m_AtlasHeight;                            // v2 - lower right y

        // calculate the UV coordinates of the 'disabled'/greyed version of this glyph
        pNewFont->m_pGlyphUVCoordsDisabled[4*index+0] = gFontStartLocations_active[index]/pNewFont->m_AtlasWidth;       // u1 - upper left x
        pNewFont->m_pGlyphUVCoordsDisabled[4*index+1] = (gYOffset+1)/pNewFont->m_AtlasHeight;                           // v1 - upper left y
        pNewFont->m_pGlyphUVCoordsDisabled[4*index+2] = gFontStartLocations_active[index+1]/pNewFont->m_AtlasWidth;     // u2 - lower right x
        pNewFont->m_pGlyphUVCoordsDisabled[4*index+3] = (gFontHeight+gYOffset)/pNewFont->m_AtlasHeight;                 // v2 - lower right y


        index++;
    }
    pNewFont->m_NumberOfGlyphsInAtlas = index;

    // add font to the asset library
    CPUTAssetLibrary::GetAssetLibrary()->AddFont( FontName, pNewFont);

    return pNewFont; 
}



// Constructor
//-----------------------------------------------------------------------------
CPUTFontOGLES::CPUTFontOGLES():m_pTextAtlas(NULL),
    m_TextAtlasResource(0)
{
    m_DisabledYOffset = 0;
}

// Destructor
//-----------------------------------------------------------------------------
CPUTFontOGLES::~CPUTFontOGLES()
{
    // release the texture atlas
    SAFE_RELEASE(m_pTextAtlas);    
}

// Return the texture atlas texture
//-----------------------------------------------------------------------------
CPUTTextureOGLES* CPUTFontOGLES::GetAtlasTexture()
{
    return m_pTextAtlas;
}

// Return the texture atlas texture resource view
//-----------------------------------------------------------------------------
GLuint CPUTFontOGLES::GetAtlasTextureResourceView()
{
    return m_TextAtlasResource;
}

// Load glyph mapping file
// The map file in an ordered list that tells you which glyph in the texture
// corresponds to the ASCII character value in this file (char->image lookup)
//--------------------------------------------------------------------------------
CPUTResult CPUTFontOGLES::LoadGlyphMappingFile(const cString fileName)
{
    return CPUT_SUCCESS;
}

